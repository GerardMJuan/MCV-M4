function [ flow ] = optFlow( A,B,Block_Size,S_range )
%OPTFLOW Function that implements an optical flow estimation by block
%matching, with Backwards motion estimation 
%   A: first image
%   B: second image
%   Block_size: size of the block (Normally 16 pixels
%   S_range: Range of the search area
nB_x = (floor(size(B,1)/Block_Size));
nB_y = (floor(size(B,2)/Block_Size));
flow = zeros(size(1:nB_x),size(1:nB_y));
%For each block we need to compute displacement
for h_step = 0:nB_x-1
    for w_step = 0:nB_y-1
        %Compute block coordinates upper left corner
        x = 1 + w_step*Block_Size;
        y = 1 + h_step*Block_Size;
        %Get reference block from B (we are doing backwards motion
        %estimation)
        
        % Block to search
        iB = B(x:x+Block_Size,y:y+Block_Size);
        
        % Search area
        sA = A(x-S_range:x+2*S_range,y-S_range:y+2*S_range);
        
        % Search for biggest MSE in the search area
        %It returns the position of the pixel where the original block is
        [i, j] = blockesearch(sA,iB,Block_Size);
        
        % Get best position with better MSE
        
        
        %TODO - TEST POSITIONS and get the one with best MSE
        %Assume all pixels in the block move in the same way
        %TODO - Apply best displacement vector to all pixels in the block.

        
    end
end
end


% Compare both blocks and return the MSE
function [x, y] = blocksearch(sA, iB, Bsize)
    
    iB = reshape(iA, [size(iA,1)*size(iA,2), 1];
    x = 0;        
    y = 0;
    maxDist = -1;
    for i = 1:size(sA,1)-Bsize
        for j = 1:size(sA,2)-Bsize
            % Get the block to compare
            iA = sA(i:i+Bsize,j:j+Bsize);
            iA = reshape(iA, [size(iA,1)*size(iA,2), 1]);
            
            % Compare the two blocks
            maxDist = sqrt(sum((iA - iB) .^ 2));
            
            % Get coordinates if better
            
        
        end
    end
    
        
end
